package graphics;

import game.Action;
import game.Client;
import javafx.event.ActionEvent;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.shape.Ellipse;
import network.Instruction;

/**
 * FXML controller for file lobby_creation.fxml. Extends OverlordCtrl and implements CtrlNecessities
 */
public class LobbyCreationCtrl extends OverlordCtrl implements CtrlNecessities {
    // Status bar elements
    public Ellipse clientConnectCircle;
    public Label clientConnectionLabel;
    public Label clientNameLabel;
    public Label clientStateLabel;
    public Label responseLabel;
    public Ellipse opponentConnectCircle;
    public Label opponentConnectionLabel;
    public Label opponentNameLabel;

    /** Input TextField for lobby name */
    public TextField lobbyNameTF;
    /** Lobby creation Button */
    public Button createLobbyBtn;
    /** Lobby cancelation Button */
    public Button cancelLobbyBtn;
    /** Lobby name error Label */
    public Label lobbyNameErrLbl;

    /**
     * Button action for lobby creation. Checks for empty value entered.
     * @param actionEvent autogenerated, isn't used
     */
    public void create(ActionEvent actionEvent) {
        if(lobbyNameTF.getText().isBlank()) {
            lobbyNameErrLbl.setText("Please enter a name");
            lobbyNameErrLbl.setVisible(true);
            return;
        }

        if(lobbyNameTF.getText().length() > 63) {
            lobbyNameErrLbl.setText("Lobby name too long! Maximum 63 characters");
            lobbyNameErrLbl.setVisible(true);
            return;
        }

        client.setInstruction(Instruction.CREATE_LOBBY);
    }

    /**
     * Button action for lobby cancelation.
     * @param actionEvent autogenerated, isn't used
     */
    public void cancel(ActionEvent actionEvent) {
        if(client.getAutomaton().validateTransition(Action.CANCEL)) {
            client.getAutomaton().makeTransition(Action.CANCEL);
            genericSetScene("main_menu_connected.fxml");
        } else {
            responseLabel.setText("Automaton: transition validation failed");
        }
    }

    /**
     * Used to get lobby name in client instance
     * @return String obtained from lobby name TextField
     */
    public String getLobbyName() {
        return lobbyNameTF.getText();
    }

    /**
     * Ref. to @CtrlNecessities
     * @param client instance
     */
    public void setClient(Client client) {
        StatusBar status = new StatusBar(clientConnectCircle, responseLabel, clientStateLabel, clientNameLabel,
                clientConnectionLabel, opponentConnectCircle, opponentConnectionLabel, opponentNameLabel);
        setClient(client, status);
    }
}
