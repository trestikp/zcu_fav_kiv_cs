package graphics;

import game.Action;
import game.Client;
import javafx.event.ActionEvent;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Ellipse;

import java.util.ArrayList;

/**
 * FXML controller for file lobby_list.fxml. Extends OverlordCtrl and implements CtrlNecessities
 */
public class LobbyListCtrl extends OverlordCtrl implements CtrlNecessities {
    // Status bar elements
    public Ellipse clientConnectCircle;
    public Label clientConnectionLabel;
    public Label clientNameLabel;
    public Label clientStateLabel;
    public Label responseLabel;
    public Ellipse opponentConnectCircle;
    public Label opponentConnectionLabel;
    public Label opponentNameLabel;

    /** Container to which lobby entries are generated */
    public VBox lobbyHolder;
    /** Lobby list cancelation button */
    public Button cancelBtn;


    /**
     * Ref. to @CtrlNecessities
     * @param client instance
     */
    @Override
    public void setClient(Client client) {
//        setClient(client, statusController);
        StatusBar status = new StatusBar(clientConnectCircle, responseLabel, clientStateLabel, clientNameLabel,
                clientConnectionLabel, opponentConnectCircle, opponentConnectionLabel, opponentNameLabel);
        setClient(client, status);
    }

    /**
     * Adds lobbies inside HBox containers to @lobbyHolder
     * @param lobbies available lobbies
     */
    public void setLobbyContent(ArrayList<HBox> lobbies) {
        if(lobbies.isEmpty()) {
            Label empty = new Label("There are no active lobbies");
            empty.setStyle("-fx-font-size: 18px");

            lobbyHolder.getChildren().add(empty);
        }

        for(HBox lb : lobbies) {
            lobbyHolder.getChildren().add(lb);
        }
    }

    /**
     * Button action for lobby list cancelation.
     * @param actionEvent autogenerated, isn't used
     */
    public void cancel(ActionEvent actionEvent) {
        if(client.getAutomaton().validateTransition(Action.CANCEL)) {
            client.getAutomaton().makeTransition(Action.CANCEL);
            genericSetScene("main_menu_connected.fxml");
        } else {
            responseLabel.setText("Automaton: transition validation failed");
        }
    }
}
