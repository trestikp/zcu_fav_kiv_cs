(function ($) {
    let resultInstructions = [
        ["0", "JMP", "0", "1"],
        ["1", "INT", "0", "5"],
        ["2", "LIT", "0", "0"],
        ["3", "STO", "0", "4"],
        ["4", "LIT", "0", "1"],
        ["5", "LIT", "0", "1"],
        ["6", "OPR", "0", "8"],
        ["7", "JMC", "0", "13"],
        ["8", "LOD", "0", "4"],
        ["9", "LIT", "0", "1"],
        ["10", "OPR", "0", "2"],
        ["11", "STO", "0", "4"],
        ["12", "JMP", "0", "17"],
        ["13", "LOD", "0", "4"],
        ["14", "LIT", "0", "1000"],
        ["15", "OPR", "0", "2"],
        ["16", "STO", "0", "4"],
        ["17", "LIT", "0", "1"],
        ["18", "LIT", "0", "1"],
        ["19", "OPR", "0", "9"],
        ["20", "JMC", "0", "26"],
        ["21", "LOD", "0", "4"],
        ["22", "LIT", "0", "1"],
        ["23", "OPR", "0", "2"],
        ["24", "STO", "0", "4"],
        ["25", "JMP", "0", "30"],
        ["26", "LOD", "0", "4"],
        ["27", "LIT", "0", "1000"],
        ["28", "OPR", "0", "2"],
        ["29", "STO", "0", "4"],
        ["30", "LIT", "0", "1"],
        ["31", "LIT", "0", "1"],
        ["32", "OPR", "0", "10"],
        ["33", "JMC", "0", "39"],
        ["34", "LOD", "0", "4"],
        ["35", "LIT", "0", "1"],
        ["36", "OPR", "0", "2"],
        ["37", "STO", "0", "4"],
        ["38", "JMP", "0", "43"],
        ["39", "LOD", "0", "4"],
        ["40", "LIT", "0", "1000"],
        ["41", "OPR", "0", "2"],
        ["42", "STO", "0", "4"],
        ["43", "LIT", "0", "1"],
        ["44", "LIT", "0", "1"],
        ["45", "OPR", "0", "13"],
        ["46", "JMC", "0", "52"],
        ["47", "LOD", "0", "4"],
        ["48", "LIT", "0", "1"],
        ["49", "OPR", "0", "2"],
        ["50", "STO", "0", "4"],
        ["51", "JMP", "0", "56"],
        ["52", "LOD", "0", "4"],
        ["53", "LIT", "0", "1000"],
        ["54", "OPR", "0", "2"],
        ["55", "STO", "0", "4"],
        ["56", "LIT", "0", "1"],
        ["57", "LIT", "0", "1"],
        ["58", "OPR", "0", "12"],
        ["59", "JMC", "0", "65"],
        ["60", "LOD", "0", "4"],
        ["61", "LIT", "0", "1"],
        ["62", "OPR", "0", "2"],
        ["63", "STO", "0", "4"],
        ["64", "JMP", "0", "69"],
        ["65", "LOD", "0", "4"],
        ["66", "LIT", "0", "1000"],
        ["67", "OPR", "0", "2"],
        ["68", "STO", "0", "4"],
        ["69", "LIT", "0", "1"],
        ["70", "LIT", "0", "1"],
        ["71", "OPR", "0", "11"],
        ["72", "JMC", "0", "78"],
        ["73", "LOD", "0", "4"],
        ["74", "LIT", "0", "1"],
        ["75", "OPR", "0", "2"],
        ["76", "STO", "0", "4"],
        ["77", "JMP", "0", "82"],
        ["78", "LOD", "0", "4"],
        ["79", "LIT", "0", "1000"],
        ["80", "OPR", "0", "2"],
        ["81", "STO", "0", "4"],
        ["82", "LIT", "0", "1"],
        ["83", "OPR", "0", "7"],
        ["84", "JMC", "0", "90"],
        ["85", "LOD", "0", "4"],
        ["86", "LIT", "0", "1"],
        ["87", "OPR", "0", "2"],
        ["88", "STO", "0", "4"],
        ["89", "JMP", "0", "94"],
        ["90", "LOD", "0", "4"],
        ["91", "LIT", "0", "1000"],
        ["92", "OPR", "0", "2"],
        ["93", "STO", "0", "4"],
        ["94", "RET", "0", "0"],
    ]

    let inputCode = "var res;\n\nbegin\n\tres := 0;\n\n(* +1 *)\nif 1 = 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\t(* +1000 *)\n\tif 1 # 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\t(* +1000 *)\n\tif 1 < 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\t(* +1 *)\n\tif 1 <= 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\t(* +1000 *)\n\tif 1 > 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\t(* +1 *)\n\tif 1 >= 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\n\tif odd 1 then res := res + 1;\n\t\t\t else res := res + 1000;\n\n\t(* expected res value: 3004*)\nend.";

    /**
     * Main test method. Throws exception with information if the test fails.
     */
    window.runTestCase = function() {
        Parser.parse(true, inputCode);

        TestRunner.validateInstructions(resultInstructions);
    }
})($);