package cz.zcu.kiv.pia.bikesharing.business.domain;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.*;

/**
 * Represents a single user of the service.
 */
public class User implements UserDetails {
    /**
     * Unique identifier. Generated by database if null.
     */
    private UUID id;
    /**
     * Full name of the user.
     */
    private String name;
    /**
     * Email address of the user, used for log in.
     */
    private String emailAddress;
    /**
     * Role of the user.
     */
    private Role role = Role.REGULAR;
    /** Username - required */
    private String username;
    /** Password hash */
    private String password;
    /** Flag to indicate the user is authenticated via Github */
    private Boolean github = false;

    /**
     * Constructor for retrieving data by user.
     * @param id user UUID
     */
    public User(UUID id) {
        this.id = id;
    }

    /**
     * Constructor for registering new Github user. Github registration only uses username, however password is
     * required as NON NULL in database, so a fake password is used.
     * @param username Github username
     * @param password Fake password
     */
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    /**
     * Constructor for registering new user with almost all information. Registration through form. ID can be null,
     * because it's generated by database.
     * @param id user UUID
     * @param name user name
     * @param emailAddress user email
     * @param role user role
     * @param username username - required
     * @param password password
     */
    public User(UUID id, String name, String emailAddress, Role role, String username, String password) {
        this.id = id;
        this.name = name;
        this.emailAddress = emailAddress;
        this.role = role;
        this.username = username;
        this.password = password;
    }

    /**
     * Full constructor used when retrieving data from database.
     * @param id user UUID
     * @param name user name
     * @param emailAddress user email
     * @param role user role
     * @param username username - required
     * @param password password hash
     * @param github github flag
     */
    public User(UUID id, String name, String emailAddress, Role role, String username, String password, Boolean github) {
        this.id = id;
        this.name = name;
        this.emailAddress = emailAddress;
        this.role = role;
        this.username = username;
        this.password = password;
        this.github = github;
    }

    public UUID getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public Role getRole() {
        return role;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Boolean getGithub() {
        return github;
    }

    public void setGithub(Boolean github) {
        this.github = github;
    }

    /**
     * Starts a new bike ride of this user on given bike.
     *
     * @param bike Bike used for the bike ride
     * @return Started bike ride
     */
    public Ride startRide(Bike bike) {
        var startStand = bike.getStand();

        bike.removeFromStand();

        return new Ride(this, bike, startStand);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof User user)) return false;
        return Objects.equals(id, user.id) && Objects.equals(name, user.name) && Objects.equals(emailAddress, user.emailAddress) && role == user.role;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, emailAddress, role);
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", emailAddress='" + emailAddress + '\'' +
                ", role=" + role +
                '}';
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.name()));
    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public String getUsername() {
        return this.username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    public enum Role {
        /**
         * Regular user
         */
        REGULAR,
        /**
         * Serviceman, can do everything that regular users but also maintains bikes
         */
        SERVICEMAN,
    }
}
